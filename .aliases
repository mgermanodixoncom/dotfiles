#!/usr/bin/env bash

##
## Helper Functions
##

# Usage:
#	alias:script PROGRAM=SCRIPT
#
# Generates a script-based alias.
#
# This function will add execute permissions on SCRIPT and generate an alias named PROGRAM to SCRIPT.
# If SCRIPT does not exist, this function does nothing.
function alias:script() {
	local program=$(cut -d= -f1 <<< $1)
	local script=$(cut -d= -f2 <<< $1)

	if [[ ! -e $script ]]; then
		return 1
	fi

	chmod +x "$script"
	alias $program="$script"
}

# Usage:
#	alias:sudo [-b] PROGRAM[=COMMAND]
#
# Generates aliases for programs that need sudo.
#
# If COMMAND is given, the alias will be set to COMMAND.
# Otherwise, COMMAND will be PROGRAM.
#
# When -b is given, this function will generate one alias with PROGRAM in tact and COMMAND in tact,
# and another alias with PROGRAM prepended with "su" and COMMAND prepended with "sudo ".
# Otherwise, this function will generate an alias with PROGRAM in tact and COMMAND prepended with "sudo ".
#
# Examples:
#
# 1. alias:sudo pacman                        -> alias pacman='sudo pacman'
# 2. alias:sudo -b file                       -> alias file='file'; alias sufile='sudo file'
# 3. alias:sudo shutdown='systemctl poweroff' -> alias shutdown='sudo systemctl poweroff'
# 4. alias:sudo -b cpdir='cp -r'              -> alias cpdir='cp -r'; alias sucpdir='cp -r'
function alias:sudo() {
	local both
	if [[ $1 == -b ]]; then
		both=true; shift
	else
		both=false
	fi

	local program command
	if [[ $1 =~ = ]]; then
		program=$(cut -d= -f1 <<< $1)
		command=$(cut -d= -f2- <<< $1)
	else
		program=$1
		command=$1
	fi

	if $both; then
		alias $program="$command"
		alias su$program="sudo $command"
	else
		alias $program="sudo $command"
	fi
}

# Usage:
#	alias:configuration PROGRAM PATH [RELOAD_COMMAND] [RELOAD_MESSAGE]
#
# Generates aliases for editing program configuration(s) and optionally reloads those programs.
#
# This function will generate a BASH script in "$DOTFILES_ALIASES", and an alias to that script.
# The generated script, when executed, will allow the user to edit the configuration file for the program.
# The name of the generated alias will be configure:PROGRAM.
#
# If PATH is a file, the generated script (and by extension the generated alias) will take no parameters.
# If PATH is a directory, the generated script (and by extension the generated alias) will take one parameter - the name of the file in PATH to configure.
# If PATH exists, this function will take into consideration the owner of PATH and use elevate editing if necessary.
# If PATH does not exist, this function will do nothing.
#
# If RELOAD_COMMAND is given, the generated script and/or generated alias will run RELOAD_COMMAND after the user finishes editing the file and the file has changed.
#
# If RELOAD_MESSAGE is given, RELOAD_MESSAGE will be printed to stdout before RELOAD_COMMAND.
# Otherwise, RELOAD_MESSAGE will be "Reloading PROGRAM..."
function alias:configuration() {
	local program=$1; shift
	local path=$1; shift
	local reload_command=$1; shift
	local reload_message=$1

	if [[ ! -e $path ]]; then
		return 1
	fi

	local editor
    if [[ -z $VISUAL ]]; then
        if touch "$path" 2>&1 | grep -q 'Permission denied'; then
            editor="sudo $SUDO_EDITOR"
        else
            editor="$EDITOR"
        fi
    else
        editor="$VISUAL"
    fi

	local alias_script_path="$DOTFILES_ALIASES/$program.sh"
	cat <<- EOF > "$alias_script_path"
	#!/usr/bin/env bash
	# Generated by alias:configuration()
	main() {
	EOF

	if [[ -d $path ]]; then
		cat <<- EOF >> "$alias_script_path"
		if [[ -z \$1 || \$1 == --help ]]; then
			printf 'configure:$program: usage: configure:$program file\\n'
			exit 1
		fi
		local file="$path/\$1"
		EOF
	else
		printf 'local file="%s"\n' "$path" >> "$alias_script_path"
	fi

	if [[ -z $reload_command ]]; then
		printf "%s \$file\n" "$editor" >> "$alias_script_path"
	elif [[ -z $reload_message ]]; then
		cat <<- EOF >> "$alias_script_path"
		local begin_hash=\$(sha1sum \$file)
		$editor \$file
		local end_hash=\$(sha1sum \$file)
		if [[ \$begin_hash != \$end_hash ]]; then
			printf 'Reloading $program...\\n'
			$reload_command
		fi
		EOF
	else
		cat <<- EOF >> "$alias_script_path"
		local begin_hash=\$(sha1sum \$file)
		$editor \$file
		local end_hash=\$(sha1sum \$file)
		if [[ \$begin_hash != \$end_hash ]]; then
			printf '$reload_message\\n'
			$reload_command
		fi
		EOF
	fi

	printf '}; main\n' >> "$alias_script_path"

	alias:script configure:$program="$alias_script_path"
}

##
## Aliases
##

function aliases:user() {
	alias user:id='id'
	alias user:groups='groups'
	alias user:impersonate='sudo -iu'
	alias:sudo user:list="awk -F: '{ printf \"%s \", \$1; } END { print; }' /etc/passwd"
	alias:sudo user:create='useradd'
	alias:sudo user:password='passwd'
	alias:sudo user:delete='userdel'
	alias:sudo user:expire='chage -d 0'
	alias:sudo user:info='chfn'

	cat <<- EOF > "$DOTFILES_ALIASES/user:name.sh"
	#!/usr/bin/env bash
	# Generated by aliases:user()
	main() {
	if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
		printf 'user:name: usage: user:name old_name new_name\\n'
		exit 1
	fi
	sudo usermod -l "\$2" "\$1"
	}; main
	EOF
	alias:script user:name="$DOTFILES_ALIASES/user:name.sh"

	cat <<- EOF > "$DOTFILES_ALIASES/user:shell.sh"
	#!/usr/bin/env bash
	# Generated by aliases:user()
	main() {
	if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
		printf 'user:shell: usage: user:shell user shell\\n'
		exit 1
	fi
	sudo usermod -s "\$2" "\$1"
	}; main
	EOF
	alias:script user:name="$DOTFILES_ALIASES/user:name.sh"

	cat <<- EOF > "$DOTFILES_ALIASES/user:home.sh"
	#!/usr/bin/env bash
	# Generated by aliases:user()
	main() {
	if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
		printf 'user:home: usage: user:home [-m] user new_home\\n'
		exit 1
	fi
	local m
	if [[ \$1 == -m ]]; then
		m=true; shift
	else
		m=false
	fi
	if \$m; then
		sudo usermod -d "\$2" -m "\$1"
	else
		sudo usermod -d "\$2" "\$1"
	fi
	}; main
	EOF
	alias:script user:home="$DOTFILES_ALIASES/user:home.sh"

	cat <<- EOF > "$DOTFILES_ALIASES/user:group.sh"
	#!/usr/bin/env bash
	# Generated by aliases:user()
	main() {
	if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
		printf 'user:group: usage: user:group user groups\\n'
		exit 1
	fi
	sudo usermod -aG "\$2" "\$1"
	}; main
	EOF
	alias:script user:name="$DOTFILES_ALIASES/user:name.sh"
}; aliases:user

function aliases:group() {
	alias:sudo group:list="awk -F: '{ printf \"%s \", \$1; } END { print; }' /etc/groups"
	alias:sudo group:create='groupadd'

	cat <<- EOF > "$DOTFILES_ALIASES/group:name.sh"
	#!/usr/bin/env bash
	# Generated by aliases:group()
	main() {
	if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
		printf 'group:home: usage: group:name old_name new_name\\n'
		exit 1
	fi
	sudo groupmod -n "\$2" "\$1"
	}; main
	EOF
	alias:script group:name="$DOTFILES_ALIASES/group:name.sh"
}; aliases:group

function aliases:files() {
	alias ls='ls --color=auto'
	alias lsa='ls --color=auto -A'
	alias lsla='ls --color=auto -lA'
	alias lslatr='ls --color=auto -lAtr'
	alias:sudo -b file
	alias:sudo -b cp
	alias:sudo -b cpdir='cp -r'
	alias:sudo -b mv
	alias:sudo -b rm
	alias:sudo -b rmdir='rm -r'
	alias:sudo -b mkdir='mkdir -p'
	alias:sudo -b touch
	alias:sudo -b ln
	alias:sudo -b sln='ln -s'
	alias:sudo -b cat
	alias:sudo -b tac
	alias:sudo -b head
	alias:sudo -b tail
	alias:sudo -b chown='chown -R'
	alias:sudo -b chmod='chmod -R'
	alias:sudo -b chgrp='chgrp -R'
	alias:sudo -b install
	
    if [[ -n $VISUAL ]]; then
        alias edit="$VISUAL"
        alias suedit="$VISUAL"
    else
        alias edit="$EDITOR"
        alias suedit="sudo $SUDO_EDITOR"
    fi

	if which nano &> /dev/null; then
		alias:configuration nano /etc/nanorc
		alias:configuration rnano /etc/rnanorc
	fi

	if which git &> /dev/null; then
		alias:configuration git "$HOME/.gitconfig"
	fi
}; aliases:files

function aliases:devices() {
	alias:sudo mount="mount -m"
	alias:sudo umount
	alias:sudo fdisk
	alias:sudo dd
	alias:configuration fstab /etc/fstab "systemctl daemon-reload"
}; aliases:devices

function aliases:networking() {
	alias:configuration hosts /etc/hosts

	if which ufw &> /dev/null; then
		alias:sudo ufw
	fi

	if which sshd &> /dev/null; then
		alias:sudo ssh:reload='systemctl reload sshd'
		alias:configuration ssh:daemon /etc/ssh/sshd_config "sudo systemctl reload sshd" "Reloading Secure SHell Daemon..."
		alias:configuration ssh:client "$HOME/.ssh/config"
	fi

	if which httpd &> /dev/null; then
		alias bcrypt="htpasswd -bnB "
		alias:sudo apache:reload='systemctl reload httpd'
		alias:configuration apache /etc/httpd/conf/httpd.conf "sudo systemctl reload httpd" "Reloading Apache..."
		alias:configuration apache:vhosts /etc/httpd/conf/extra/vhosts "sudo systemctl reload httpd" "Reloading Apache..."
	fi
}; aliases:networking

function aliases:system() {
	alias pkgmgr=paru
	alias:sudo pacman
	alias:sudo systemctl
	alias:sudo shutdown='systemctl poweroff'
	alias:sudo reboot='systemctl reboot'
	alias:configuration pacman /etc/pacman.conf
	
	if which grub-install &> /dev/null && which grub-mkconfig &> /dev/null; then
		alias:sudo grub:install="grub-install --target=$(uname -m)-efi --efi-directory=/boot --bootloader-id=GRUB"
		alias:sudo grub:reconfigure="grub-mkconfig -o /boot/grub/grub.cfg"
		alias:sudo grub:reload="sudo grub-install --target=$(uname -m)-efi --efi-directory=/boot --bootloader-id=GRUB && sudo grub-mkconfig -o /boot/grub/grub.cfg"
		alias:configuration grub /etc/default/grub "sudo grub-install --target=$(uname -m)-efi --efi-directory=/boot --bootloader-id=GRUB && sudo grub-mkconfig -o /boot/grub/grub.cfg" "Reinstalling and reconfiguring GRUB..."
		alias:configuration grub:entries /etc/grub.d "sudo grub-install --target=$(uname -m)-efi --efi-directory=/boot --bootloader-id=GRUB && sudo grub-mkconfig -o /boot/grub/grub.cfg" "Reinstalling and reconfiguring GRUB..."
	fi

	if which mkinitcpio &> /dev/null; then
		alias:sudo initramfs:reconfigure="mkinitcpio -P"
		alias:configuration initramfs /etc/mkinitcpio.conf "sudo mkinitcpio -P" "Regenerating initramfs..."
	fi
}; aliases:system

function aliases:programming() {
	if which php &> /dev/null; then
		alias:configuration php /etc/php/php.ini
	fi
}; aliases:programming

function aliases:shell() {
	local reload
	if ! shopt -q login_shell; then
		reload="source $HOME/.bashrc"
		alias:configuration shell:interactive "$HOME/.bashrc" "$reload" "Reloading shell..."
		alias:configuration shell:login "$HOME/.profile"
	else
		reload="source $HOME/.bashrc"
		alias:configuration shell:interactive "$HOME/.bashrc"
		alias:configuration shell:login "$HOME/.profile" "$reload" "Reloading shell..."
	fi
	alias reload="$reload"

	alias:configuration shell "$HOME/.bash" "$reload" "Reloading shell..."
	alias:configuration shell:integrations "$HOME/.integrations" "$reload" "Reloading shell..."
	alias:configuration shell:aliases "$HOME/.aliases" "$reload" "Reloading shell..."
}; aliases:shell
