#!/usr/bin/env bash

# TODO: Where --help flags are checked for, add -h

if [[ ! -d $DOTFILES_ALIASES ]]; then
	if [[ -e $DOTFILES_ALIASES ]]; then
		rm -f "$DOTFILES_ALIASES"
	fi
	mkdir -p "$DOTFILES_ALIASES"
fi

if [[ ! -d $DOTFILES_TEMPDIR ]]; then
	if [[ -e $DOTFILES_TMPDIR ]]; then
		rm -f "$DOTFILES_TEMPDIR"
	fi
	mkdir -p "$DOTFILES_TEMPDIR"
fi

# Usage:
#	alias:script PROGRAM=SCRIPT
#
# Generates a script-based alias named PROGRAM that executes SCRIPT.
function alias:script() {
	local program=$(cut -d= -f1 <<< "$1")
	local script=$(cut -d= -f2- <<< "$1")

	local alias_script_path="$DOTFILES_ALIASES/$program.sh"
	if [[ ! -x $alias_script_path ]]; then
        printf 'Generating alias script for alias %s...\n' "$program"

		cat <<- EOF > "$alias_script_path"
		#!/usr/bin/env bash
		# Generated using alias:script $program $script
		function main() {
		EOF
		awk '{ printf "    %s\n", $0; }' "$script" >> "$alias_script_path"
		cat <<- EOF >> "$alias_script_path"
		}
		main "\$@"
		EOF

		chmod +x "$alias_script_path"
	fi

	alias "$program=$alias_script_path"
}

# Usage:
#	alias:sudo [-b] PROGRAM[=COMMAND]
#
# Generates aliases for programs that need sudo.
#
# If COMMAND is given, the alias will be set to COMMAND.
# Otherwise, COMMAND will be PROGRAM.
#
# When -b is given, this function will generate one alias with PROGRAM in tact and COMMAND in tact,
# and another alias with PROGRAM prepended with "su" and COMMAND prepended with "sudo ".
# Otherwise, this function will generate an alias with PROGRAM in tact and COMMAND prepended with "sudo ".
#
# Examples:
#
# 1. alias:sudo pacman                        -> alias pacman='sudo pacman'
# 2. alias:sudo -b file                       -> alias file='file'; alias sufile='sudo file'
# 3. alias:sudo shutdown='systemctl poweroff' -> alias shutdown='sudo systemctl poweroff'
# 4. alias:sudo -b cpdir='cp -r'              -> alias cpdir='cp -r'; alias sucpdir='cp -r'
function alias:sudo() {
	local both
	if [[ $1 == -b ]]; then
		both=true; shift
	else
		both=false
	fi

	local program command
	if [[ $1 =~ = ]]; then
		program=$(cut -d= -f1 <<< $1)
		command=$(cut -d= -f2- <<< $1)
	else
		program=$1
		command=$1
	fi

	if $both; then
		alias "$program=$command"
		alias "su$program=sudo $command"
	else
		alias "$program=sudo $command"
	fi
}

# Usage:
#	alias:configuration PROGRAM=PATH [RELOAD_COMMAND] [RELOAD_MESSAGE]
#
# Generates aliases for editing program configuration(s) and optionally reloads those programs.
#
# This function will generate a BASH script in "$DOTFILES_ALIASES", and an alias to that script.
# The generated script, when executed, will allow the user to edit the configuration file for the program.
# The name of the generated alias will be configure:PROGRAM.
#
# If PATH is a file, the generated script (and by extension the generated alias) will take no parameters.
# If PATH is a directory, the generated script (and by extension the generated alias) will take one parameter - the name of the file in PATH to configure.
# If PATH exists, this function will take into consideration the owner of PATH and use elevate editing if necessary.
# If PATH does not exist, this function will do nothing.
#
# If RELOAD_COMMAND is given, the generated script and/or generated alias will run RELOAD_COMMAND after the user finishes editing the file and the file has changed.
#
# If RELOAD_MESSAGE is given, RELOAD_MESSAGE will be printed to stdout before RELOAD_COMMAND.
# If RELOAD_MESSAGE is the special value "!ignore", then no message will be printed.
# Otherwise, RELOAD_MESSAGE will be "Reloading PROGRAM..."
function alias:configuration() {
	local program=$(cut -d= -f1 <<< "$1")
	local path=$(cut -d= -f2- <<< "$1"); shift
	local reload_command=$1; shift
	local reload_message=$1

	if [[ ! -e $path ]]; then
		return 1
	fi

	local editor
	if [[ -z $VISUAL ]]; then
		if touch "$path" 2>&1 | grep -q 'Permission denied'; then
			editor="sudo $SUDO_EDITOR"
		else
			editor="$EDITOR"
		fi
	else
		editor="$VISUAL"
	fi

	if [[ ! -x $DOTFILES_ALIASES/configure:$program.sh ]]; then
		if [[ ! -p /tmp/configuration_alias_code ]]; then
			if [[ -e /tmp/configuration_alias_code ]]; then
				rm -f /tmp/configuration_alias_code
			fi
			mkfifo /tmp/configuration_alias_code
		fi
		{
			printf '# Generated using alias:configuration'
			printf ' %s' "$program"
			printf ' %s' "$path"
			if [[ -n $reload_command ]]; then
				printf ' %s' "$reload_command"
			fi
			if [[ -n $reload_message ]]; then
				printf ' %s' "$reload_message"
			fi
			printf '\n'

			if [[ -d $path ]]; then
				cat <<- EOF
				if [[ -z \$1 || \$1 == -h || \$1 == --help ]]; then
				    printf 'Usage:\n' > /dev/stderr
				    printf '\tconfigure:$program FILE\n' > /dev/stderr
				    exit 2
				fi
				local file="$path/\$1"
				EOF
			else
				cat <<- EOF
				if [[ \$1 == -h || \$1 == --help ]]; then
				    printf 'Usage:\n' > /dev/stderr
				    printf '\tconfigure:$program\n' > /dev/stderr
				    exit 2
				fi
				local file="$path"
				EOF
			fi

			if [[ -z $reload_command ]]; then
				printf '%s "$file"\n' "$editor"
			elif [[ -z $reload_message ]]; then
				cat <<-EOF
				local prechecksum=\$(cksum "\$file")
				$editor "\$file"
				local postchecksum=\$(cksum "\$file")
				if [[ "\$prechecksum" != "\$postchecksum" ]]; then
				    printf 'Reloading $program...\n'
				EOF
				awk -v RS='[[:space:]]*;[[:space:]]*' '{ printf "\n    %s", $0; }' <<< "$reload_command"
				printf 'fi\n'
			elif [[ $reload_message == '!ignore' ]]; then
				cat <<-EOF
				local prechecksum=\$(cksum "\$file")
				$editor "\$file"
				local postchecksum=\$(cksum "\$file")
				if [[ "\$prechecksum" != "\$postchecksum" ]]; then
				EOF
				awk -v RS='[[:space:]]*;[[:space:]]*' '{ printf "\n    %s", $0; }' <<< "$reload_command"
				printf 'fi\n'
			else
				cat <<-EOF
				local prechecksum=\$(cksum "\$file")
				$editor "\$file"
				local postchecksum=\$(cksum "\$file")
				if [[ "\$prechecksum" != "\$postchecksum" ]]; then
				    printf '$reload_message\n'
				EOF
				awk -v RS='[[:space:]]*;[[:space:]]*' '{ printf "\n    %s", $0; }' <<< "$reload_command"
				printf 'fi\n'
			fi
		} > /tmp/configuration_alias_code &
	fi

	alias:script "configure:$program=/tmp/configuration_alias_code"
}

function aliases:user() {
	alias user:id=id
	alias 'user:impersonate=sudo -iu'
	alias:sudo user:list=$'awk -F: \'NR == 1 { printf "%s", $1; } NR > 1 { printf " %s", $1; } END { printf "\\n"; }\' /etc/passwd'
	alias:sudo user:create=useradd
	alias:sudo user:password=passwd
	alias:sudo user:delete=userdel
	alias:sudo user:expire='chage -d 0'
	alias:sudo user:info=chfn

	if [[ ! -p $DOTFILES_TEMPDIR/user_code ]]; then
		if [[ -e $DOTFILES_TEMPDIR/user_code ]]; then
			rm -f "$DOTFILES_TEMPDIR/user_code"
		fi
		mkfifo "$DOTFILES_TEMPDIR/user_code"
	fi

	if [[ ! -x $DOTFILES_ALIASES/user:name.sh ]]; then
		{
			cat <<- EOF
			# Generated by aliases:user
			if [[ -z \$1 || -z \$2 || \$1 == -h || \$1 == --help ]]; then
			    printf 'Usage:\n' > /dev/stderr
			    printf '\tuser:name OLD_NAME NEW_NAME\n' > /dev/stderr
			    exit 2
			fi

			local old_name="\$1"; shift
			local new_name="\$1" 

			sudo usermod -l "\$new_name" "\$old_name"
			EOF
		} > "$DOTFILES_TEMPDIR/user_code" &
	fi
	alias:script user:name="$DOTFILES_TEMPDIR/user_code"

	if [[ ! -x $DOTFILES_ALIASES/user:shell.sh ]]; then
		{
			cat <<-EOF
			# Generated by aliases:user
			if [[ -z \$1 || \$1 == --help ]]; then
			    printf 'Usage:\n' > /dev/stderr
			    printf '\tuser:shell USER [NEW_SHELL]\n' > /dev/stderr
			    exit 2
			fi

			local user="\$1"; shift
			if [[ -z \$2 ]]; then
			    sudo awk -v FS=':' -v user="\$user" '\$1 == user { print \$7; }' /etc/passwd
			    exit 0 
			fi
			local new_shell="\$1"

			sudo usermod -s "\$2" "\$1"
			EOF
		} > "$DOTFILES_TEMPDIR/user_code" &
	fi
	alias:script user:shell="$DOTFILES_TEMPDIR/user_code"

	if [[ ! -x $DOTFILES_ALIASES/user:home.sh ]]; then
		{
			cat <<-EOF
			# Generated by aliases:user
			if [[ -z \$1 || \$1 == --help ]]; then
			    printf 'Usage:\n' > /dev/stderr
			    printf '\tuser:home [-m|--move-home] USER [NEW_HOME]\n' > /dev/stderr
			    exit 2
			fi

			local move_home=false
			if [[ \$1 == -m || \$1 == --move-home ]]; then
			    move_home=true; shift
			fi
			local user="\$1"; shift
			if [[ -z \$1 ]]; then
			    sudo awk -v FS=':' -v user="\$user" '\$1 == user { print \$6; }' /etc/passwd
			    exit 0
			fi
			local new_home="\$1"

			if \$move_home; then
			    sudo usermod -d "\$new_home" -m "\$user"
			else
			    sudo usermod -d "\$new_home" "\$user"
			fi
			EOF
		} > "$DOTFILES_TEMPDIR/user_code" &
	fi
	alias:script user:home="$DOTFILES_TEMPDIR/user_code"

	if [[ ! -x $DOTFILES_ALIASES/user:groups.sh ]]; then
		{
			cat <<- EOF
			if [[ -z \$1 || \$1 == -h || \$1 == --help ]]; then
			    printf 'Usage:\n' > /dev/stderr
			    printf '\tuser:groups USER [GROUPS...]\n' > /dev/stderr
			    exit 2
			fi

			local user="\$1"; shift
			if [[ -z \$1 ]]; then
			    groups "\$user"
			    exit 0
			fi
			local groups=\$(tr -s ' ' ',' <<< "\$@")

			sudo usermod -aG "\$groups" "\$user"
			EOF
		} > "$DOTFILES_TEMPDIR/user_code" &
	fi
	alias:script user:groups="$DOTFILES_TEMPDIR/user_code"
}; aliases:user

function aliases:group() {
	alias:sudo group:list=$'awk -v FS=\':\' \'NR == 1 { printf "%s", $1; } NR > 1 { printf " %s", $1; } END { printf "\\n"; }\' /etc/groups'
	alias:sudo group:create=groupadd

	if [[ ! -p $DOTFILES_TEMPDIR/group_code ]]; then
		if [[ -e $DOTFILES_TEMPDIR/group_code ]]; then
			rm -f "$DOTFILES_TEMPDIR/group_code"
		fi
		mkfifo "$DOTFILES_TEMPDIR/group_code"
	fi

	if [[ ! -x $DOTFILES_ALIASES/group:name.sh ]]; then
		{
			cat <<- EOF
			# Generated by aliases:group
			if [[ -z \$1 || -z \$2 || \$1 == --help ]]; then
			    printf 'Usage:\n' > /dev/stderr
				printf '\tgroup:name OLD_NAME NEW_NAME\n' > /dev/stderr
			    exit 2
			fi
			sudo groupmod -n "\$2" "\$1"
			EOF
		} > "$DOTFILES_TEMPDIR/group_code" &
	fi
	alias:script group:name="$DOTFILES_TEMPDIR/group_code"
}; aliases:group

function aliases:files() {
	alias ls='ls --color=auto'
	alias lsa='ls --color=auto -A'
	alias lsla='ls --color=auto -lA'
	alias lslatr='ls --color=auto -lAtr'
	alias edit="$EDITOR"
	alias suedit="sudo $SUDO_EDITOR"
	alias:sudo -b cp
	alias:sudo -b 'cpdir=cp -r'
	alias:sudo -b mv
	alias:sudo -b rm
	alias:sudo -b 'rmdir=rm -r'
	alias:sudo -b 'mkdir=mkdir -p'
	alias:sudo -b touch
	alias:sudo -b ln
	alias:sudo -b 'sln=ln -s'
	alias:sudo -b cat
	alias:sudo -b tac
	alias:sudo -b head
	alias:sudo -b tail
	alias:sudo -b 'chown=chown -R'
	alias:sudo -b 'chmod=chmod -R'
	alias:sudo -b 'chgrp=chgrp -R'
	alias:sudo -b file
	alias:sudo -b install

	if which nano &> /dev/null; then
		alias:configuration nano=/etc/nanorc
		alias:configuration rnano=/etc/rnanorc
	fi

	if which git &> /dev/null; then
		alias:configuration git="$HOME/.gitconfig"
	fi
}; aliases:files

function aliases:devices() {
	alias:sudo mount='mount -m'
	alias:sudo umount
	alias:sudo fdisk
	alias:sudo dd
	alias:configuration fstab=/etc/fstab 'sudo systemctl daemon-reload'
}; aliases:devices

function aliases:networking() {
	alias:configuration hosts=/etc/hosts

	if [[ ! -p $DOTFILES_TEMPDIR/networking_code ]]; then
		if [[ -e $DOTFILES_TEMPDIR/networking_code ]]; then
			rm -f "$DOTFILES_TEMPDIR/networking_code"
		fi
		mkfifo "$DOTFILES_TEMPDIR/networking_code"
	fi

	if which ufw &> /dev/null; then
		alias:sudo ufw
	fi

	if which sshd &> /dev/null; then
		alias:sudo ssh:reload='systemctl reload sshd'
		alias:configuration ssh:daemon=/etc/ssh/sshd_config 'sudo systemctl reload sshd' 'Reloading Secure SHell Daemon...'
		alias:configuration ssh:client="$HOME/.ssh/config"
	fi

	if which httpd &> /dev/null; then
		alias:sudo apache:reload='systemctl reload httpd'
		alias:configuration apache=/etc/httpd/conf/httpd.conf 'sudo systemctl reload httpd' 'Reloading Apache...'
		alias:configuration apache:virtualhosts=/etc/httpd/conf/extra/vhosts 'sudo systemctl reload httpd' 'Reloading Apache...'

		if [[ ! -x $DOTFILES_ALIASES/bcrypt.sh ]]; then
			{
				cat <<- EOF
				# Generated by aliases:networking
				if [[ -z \$1 || \$1 == --help ]]; then
				    printf 'Usage:\n' > /dev/stderr
					printf '\tbcrypt PASSWORD\n' > /dev/stderr
				    exit 2
				fi
				htpasswd -bnB '' "\$1" | awk -v FS=':' '{ print \$2; }'
				EOF
			} > "$DOTFILES_TEMPDIR/networking_code" &
		fi
		alias:script bcrypt="$DOTFILES_TEMPDIR/networking_code"
	fi
}; aliases:networking

function aliases:system() {
	alias:sudo pacman
	alias:sudo systemctl
	alias:sudo shutdown='systemctl poweroff'
	alias:sudo reboot='systemctl reboot'
	alias:configuration pacman=/etc/pacman.conf

	if which paru &> /dev/null; then
		alias packages=paru
	else
		alias:sudo packages=pacman
	fi

	if which grub-install &> /dev/null && which grub-mkconfig &> /dev/null; then
		local grub_install_command="grub-install --target=$(uname -m)-efi --efi-directory=/boot --bootloader-id=GRUB"
		local grub_mkconfig_command='grub-mkconfig -o /boot/grub/grub.cfg'
		alias grub:reload="sudo $grub_install_command && sudo $grub_mkconfig_command"
		alias:sudo grub:install="$grub_install_command"
		alias:sudo grub:reconfigure="$grub_mkconfig_command"
		alias:configuration grub=/etc/default/grub "sudo $grub_install_command && sudo $grub_mkconfig_command" 'Reinstalling and reconfiguring GRUB...'
		alias:configuration grub:entries=/etc/grub.d "sudo $grub_install_command && sudo $grub_mkconfig_command" 'Reinstalling and reconfiguring GRUB...'
	fi

	if which mkinitcpio &> /dev/null; then
		alias:sudo initramfs:reconfigure='mkinitcpio -P'
		alias:configuration initramfs=/etc/mkinitcpio.conf 'sudo mkinitcpio -P' 'Regenerating initramfs...'
	fi
}; aliases:system

function aliases:programming() {
	if which php &> /dev/null; then
		alias:configuration php=/etc/php/php.ini
		alias:configuration php:modules=/etc/php/conf.d
	fi
}; aliases:programming

function aliases:shell() {
	local reload
	if ! shopt -q login_shell; then
		alias shell:type="printf 'interactive\\n'"
		reload="source $HOME/.bashrc"
		alias:configuration shell:interactive="$HOME/.bashrc" "$reload; $DOTFILES/commit.sh -a" 'Reloading shell...'
		alias:configuration shell:login="$HOME/.profile" "$DOTFILES/commit.sh -a" '!ignore'
	else
		alias shell:type="printf 'login\\n'"
		reload="source $HOME/.bashrc"
		alias:configuration shell:interactive="$HOME/.bashrc" "$DOTFILES/commit.sh -a" '!ignore'
		alias:configuration shell:login="$HOME/.profile" "$reload; $DOTFILES/commit.sh -a" 'Reloading shell...'
	fi
	alias shell:reload="$reload"

	alias:configuration shell="$HOME/.shell" "$reload; $DOTFILES/commit.sh -a" "Reloading shell..."
	alias:configuration shell:integrations="$HOME/.integrations" "$reload; $DOTFILES/commit.sh -a" "Reloading shell..."
	alias:configuration shell:aliases="$HOME/.aliases" "$reload; $DOTFILES/commit.sh -a" "Reloading shell..."
}; aliases:shell
